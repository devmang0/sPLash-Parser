start: program
program: statement*

?statement: declaration
         | definition
         | if_then_else
         | set_val
         | while
         | return
         | func_call ";"


?expression: or_test

?or_test: and_test 
        | or_test "||" and_test -> or

?and_test: not_test 
        | and_test "&&" not_test -> and

?not_test: comparison
         | "!" not_test -> not
          
?comparison: sum 
           | sum CMP_OP sum -> comparison
          
?sum: prod
    | sum "+" prod -> add
    | sum "-" prod -> sub

?prod: factor
     | prod "*" atom -> mul
     | prod "/" atom -> div
     | prod "%" atom -> mod 

?factor: atom_expr
       | "-" factor -> neg


?declaration: _binder [refinement] func_args ";" -> func_dec
            | _binder";" -> var_dec

?definition: "main:Void" func_args block  -> main
           | _binder [refinement] func_args block -> func_def
           | _binder "=" expression ";" -> var_def

?set_val: var "=" expression ";"
        | index_access "=" expression ";"


func_call: NAME"("(expression (("," expression )*)?)?")"


if_then_else: "if" expression block ["else" block]
while: "while" expression block 

return: "return" [expression] ";"

refinement: "where" expression

func_args: "("(arg (("," arg)*)? )?")"

arg: _binder [refinement]

block: "{" statement* "}"

var: NAME
_binder: NAME":"type_ 


?atom_expr: func_call
          | atom

?atom: INT
     | DOUBLE
     | "False" -> false
     | "True" -> true
     | var
     | STRING
     | index_access
     | array_def
     | "("expression")" // Parenthesized expression are part of this language?

index_access: [NAME|func_call|index_access|array_def] "["expression"]"

?type_: TYPE
      | "["type_"]" -> array

array_def: "{" expression ["," expression]*"}"


// Special declarations of terminals not in common.lark
OR_OP: "||"
AND_OP: "&&"
CMP_OP: "==" | "!=" | ">=" | ">" | "<" | "<="
NOT_OP: "!" 
NEG_OP: "-"

INT: (DIGIT+"_"*)+
DOUBLE: DIGIT*"."DIGIT+ 

TYPE: "Int" | "Double" | "Bool" | "String" | "Void"



//  MISC
COMMENT: "(*" /(.|\n)*?/ "*)" // Match any comments multiline

%import common.WS
%ignore WS
%import common.WS_INLINE
%ignore WS_INLINE

%ignore COMMENT

%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> STRING
%import common.DIGIT
