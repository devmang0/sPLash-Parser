start: program
program: statement*

statement: declaration
         | definition
         | ifthenelse
         | while
         | return


expression: neg
          
neg: sum  
   | "-" sum -> neg
          
sum: prod
   | sum "+" prod -> add
   | sum "-" prod -> sub

prod: atom
    | prod "*" atom -> mul
    | prod "/" atom -> div
    | prod "%" atom -> mod


declaration: binder"(" (binder ["," binder]* )? ");" -> funcdec
           | binder";" -> vardec

definition:  binder"(" (binder ["," binder]* )? ")" block -> funcdef
          |  binder "=" expression ";" -> vardef 

comparison: expression COMPOP expression

condition: comparison
         | var
         | comparison LOGOP condition



ifthenelse: "if" condition block ["else" block]
while: "while" block 

return: "return" [expression] ";"

refinement: "where" condition


block: "{" statement* "}"


?atom: INT
     | FLOAT
     | "true" -> true
     | "false" -> false
     | var
     | STRING
     // | "("expression")" Parenthesized expression are part of this language?


var: NAME
binder: NAME":"TYPE [refinement]


// Special declarations of terminals not in common.lark
COMPOP: "==" | "!=" | ">=" | ">" | "<" | "<="
LOGOP:  "&&" | "||"  
AROP:   "+" | "-"  | "*"  | "/"  | "%"

UNOP: "!"

INT: /((_*)?\d+)+/
FLOAT: DIGIT+ | DIGIT*"."DIGIT+ 

TYPE: "Int" | "Float" | "Double" | "Bool" |  "String"

BOOL: "true" 
    | "false"


// NAME (alias for common.CNAME) describes our variable format  
INDEX_ACCESS: NAME"["INT"]" 

//  MISC
COMMENT: "(*" /(.|\n)*?/ "*)" // Match any comments multiline

%import common.WS
%ignore WS
%import common.WS_INLINE
%ignore WS_INLINE

%ignore COMMENT

%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> STRING
%import common.DIGIT





