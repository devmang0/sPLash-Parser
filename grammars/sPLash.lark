start: program
program: statement*

?statement: declaration
         | definition
         | if_then_else
         | set_val
         | while
         | return
         | func_call ";"


?expression: neg
           | func_call
          
?neg: sum
          
?sum: prod
    | sum "+" prod -> add
    | sum "-" prod -> sub

?prod: factor
     | prod "*" atom -> mul
     | prod "/" atom -> div
     | prod "%" atom -> mod 

?factor: atom
       | "!" factor -> not
       | "-" factor -> neg


?declaration: _binder [refinement] func_args ";" -> func_dec
            | _binder";" -> var_dec

?definition: "main:Void" func_args block  -> main
           | _binder [refinement] func_args block -> func_def
           | _binder "=" expression ";" -> var_def 

?set_val: var "=" expression ";"

?comparison: expression CMP_OP expression

?test: comparison
     | var
     | comparison LOG_OP test

func_call: NAME"("(expression (("," expression )*)?)?")"


if_then_else: "if" test block ["else" block]
while: "while" test block 

return: "return" [expression] ";"

refinement: "where" test

func_args: "("(_binder [refinement] (("," _binder [refinement])*)? )?")"

block: "{" statement* "}"

var: NAME
_binder: NAME":"type 

?atom: INT
     | FLOAT
     | TRUE
     | FALSE
     | var
     | STRING
     | [NAME|func_call] "["atom"]" -> index_access
     // | "("expression")" Parenthesized expression are part of this language?

?type: TYPE
     | "["type"]" -> arrayof




// Special declarations of terminals not in common.lark
LOG_OP: "&&" | "||"  
ADD_OP:  "+" | "-" 
MUL_OP: "*"  | "/"  | "%"
CMP_OP: "==" | "!=" | ">=" | ">" | "<" | "<="
UNOP: "!" | "-"

INT: /((_*)?\d+)+/
FLOAT: DIGIT+ | DIGIT*"."DIGIT+ 

TYPE: "Int" | "Double" | "Bool" | "String" | "Void"

TRUE: "true" 
FALSE: "false"


// NAME (alias for common.CNAME) describes our variable format  
// INDEX_ACCESS: NAME"["INT"]" 

//  MISC
COMMENT: "(*" /(.|\n)*?/ "*)" // Match any comments multiline

%import common.WS
%ignore WS
%import common.WS_INLINE
%ignore WS_INLINE

%ignore COMMENT

%import common.CNAME -> NAME
%import common.ESCAPED_STRING -> STRING
%import common.DIGIT





